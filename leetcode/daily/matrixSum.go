package main

import (
	"fmt"
	"sort"
)

/*
2679. 矩阵中的和
给你一个下标从 0 开始的二维整数数组 nums 。一开始你的分数为 0 。你需要执行以下操作直到矩阵变为空：

矩阵中每一行选取最大的一个数，并删除它。如果一行中有多个最大的数，选择任意一个并删除。
在步骤 1 删除的所有数字中找到最大的一个数字，将它添加到你的 分数 中。
请你返回最后的 分数 。
*/

func matrixSum(nums [][]int) int {
	if len(nums) == 0 {
		return 0
	}
	m := len(nums)
	n := len(nums[0])
	score := 0
	for i := 0; i < len(nums); i++ {
		sort.Slice(nums[i], func(j, k int) bool {
			if nums[i][j] > nums[i][k] {
				return true
			}
			return false
		})
	}
	for i := 0; i < n; i++ {
		max := 0
		for j := 0; j < m; j++ {
			if nums[j][i] > max {
				max = nums[j][i]
			}
		}
		score += max
	}
	return score
}

func main() {
	nums := [][]int{
		{7, 2, 1},
		{6, 4, 2},
		{6, 5, 3},
		{3, 2, 1},
	}
	nums = [][]int{{1}}
	nums = [][]int{
		{1, 8, 16, 15, 12, 9, 15, 11, 18, 6, 16, 4, 9, 4},
		{3, 19, 8, 17, 19, 4, 9, 3, 2, 10, 15, 17, 3, 11},
		{13, 10, 19, 20, 6, 17, 15, 14, 16, 8, 1, 17, 0, 2},
		{12, 20, 0, 19, 15, 10, 7, 10, 2, 6, 18, 7, 7, 4},
		{17, 14, 2, 2, 10, 16, 15, 3, 9, 17, 9, 3, 17, 10},
		{17, 6, 19, 17, 18, 9, 14, 2, 19, 12, 10, 18, 7, 9},
		{5, 6, 5, 1, 19, 8, 15, 2, 2, 4, 4, 1, 2, 17},
		{12, 16, 8, 16, 7, 6, 18, 13, 18, 8, 14, 15, 20, 11},
		{2, 10, 19, 3, 15, 18, 20, 10, 6, 7, 0, 8, 3, 7},
		{11, 5, 10, 13, 1, 3, 4, 7, 1, 18, 20, 17, 19, 2},
		{0, 3, 20, 6, 19, 18, 3, 12, 2, 11, 3, 1, 19, 0},
		{6, 5, 3, 15, 6, 1, 0, 17, 13, 19, 3, 8, 2, 7},
		{2, 20, 9, 11, 13, 5, 1, 16, 14, 1, 19, 3, 12, 6},
	}
	fmt.Println(matrixSum(nums))
}
